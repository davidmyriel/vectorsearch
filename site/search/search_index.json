{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"2024/11/30/what-is-a-data-model-for-unstructured-data/","title":"What is a Data Model for Unstructured Data?","text":"<p>Here is an example of a data model in the context of unstructured data: </p>","tags":["Qdrant","OpenAI"]},{"location":"2024/11/30/what-is-a-data-model-for-unstructured-data/#data-model-example-document-search-system","title":"Data Model Example: Document Search System","text":"<p>This is an example of a data model tailored for unstructured data in the context of a document search system, such as one built using a vector database like Qdrant.</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/11/30/what-is-a-data-model-for-unstructured-data/#entity-document","title":"Entity: Document","text":"Field Name Data Type Description <code>id</code> String (UUID) Unique identifier for the document. <code>title</code> String The title of the document. <code>content_vector</code> Float Array Dense vector representation of the document content, generated using a pre-trained language model (e.g., OpenAI, BERT). <code>metadata</code> Object (JSON) Key-value pairs storing metadata about the document (e.g., author, date, tags). <code>categories</code> Array of Strings List of categories the document belongs to (e.g., \"contract law\", \"intellectual property\"). <code>created_at</code> DateTime Timestamp when the document was created. <code>updated_at</code> DateTime Timestamp when the document was last updated.","tags":["Qdrant","OpenAI"]},{"location":"2024/11/30/what-is-a-data-model-for-unstructured-data/#example-json-representation","title":"Example JSON Representation","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"title\": \"Copyright Law in the Digital Age\",\n  \"content_vector\": [0.123, 0.987, 0.456, ...], \n  \"metadata\": {\n    \"author\": \"Jane Doe\",\n    \"publish_date\": \"2024-01-15\",\n    \"language\": \"English\"\n  },\n  \"categories\": [\"copyright law\", \"digital media\"],\n  \"created_at\": \"2024-01-15T10:00:00Z\",\n  \"updated_at\": \"2024-11-30T12:00:00Z\"\n}\n</code></pre>","tags":["Qdrant","OpenAI"]},{"location":"2024/11/30/what-is-a-data-model-for-unstructured-data/#why-this-model","title":"Why This Model?","text":"<ol> <li>Flexibility: The unstructured content_vector enables similarity search, while structured metadata supports filtering and faceting.</li> <li>Extensibility: You can add new fields (e.g., \u201crelated documents\u201d) without major schema changes.</li> <li>Efficiency: Vector-based retrieval is efficient for unstructured text, while metadata aids precise filtering.</li> </ol>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/","title":"Inverted Index","text":"","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#definition","title":"Definition","text":"<p>An inverted index is a data structure that maps content (such as keywords or terms) to their locations within a dataset, enabling fast lookup and filtering operations. In the context of Qdrant, the inverted index is used to optimize filtering capabilities by allowing efficient retrieval of vectors based on specific payload conditions, such as filtering by metadata or tags associated with the stored vectors.</p> <p>This mechanism is particularly useful in hybrid search scenarios where sparse (keyword-based) filtering is combined with dense (vector-based) similarity searches.</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#example-in-qdrant","title":"Example in Qdrant","text":"<p>Imagine you are building a recommendation engine for an e-commerce platform. Each vector represents a product, and payloads (metadata) include fields such as <code>category</code>, <code>price</code>, and <code>brand</code>.</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#creating-a-collection-with-an-inverted-index","title":"Creating a Collection with an Inverted Index","text":"<pre><code>POST /collections/products\n{\n  \"vectors\": {\n    \"size\": 128,\n    \"distance\": \"Cosine\"\n  },\n  \"payload_schema\": {\n    \"category\": {\n      \"type\": \"keyword\",\n      \"index\": true\n    },\n    \"price\": {\n      \"type\": \"integer\",\n      \"index\": true\n    },\n    \"brand\": {\n      \"type\": \"keyword\",\n      \"index\": true\n    }\n  }\n}\n</code></pre> <p>In this configuration: - <code>category</code> and <code>brand</code> are indexed as <code>keyword</code>, allowing filtering by exact matches. - <code>price</code> is indexed as <code>integer</code>, enabling range queries (e.g., products priced between $10 and $50).</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#query-example","title":"Query Example","text":"<p>To retrieve vectors for all products in the <code>electronics</code> category with a price between $50 and $200:</p> <pre><code>POST /collections/products/points/search\n{\n  \"filter\": {\n    \"must\": [\n      { \"key\": \"category\", \"match\": { \"value\": \"electronics\" } },\n      { \"key\": \"price\", \"range\": { \"gte\": 50, \"lte\": 200 } }\n    ]\n  },\n  \"vector\": [0.1, 0.2, 0.3, ...],\n  \"top\": 10\n}\n</code></pre>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#result","title":"Result","text":"<p>The inverted index ensures that the filter step is efficient, significantly reducing the search space before the similarity search is performed.</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#why-it-matters","title":"Why It Matters","text":"<p>An inverted index in Qdrant allows developers to create powerful, real-time search applications that combine metadata filtering and semantic similarity, optimizing both speed and relevance.</p>","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#tabular-example","title":"Tabular Example","text":"<p>Suppose we have the following dataset of products:</p> Product ID Category Brand Price 1 Electronics Samsung 150 2 Electronics Apple 200 3 Home Appliances Samsung 300 4 Electronics Sony 100 5 Furniture IKEA 250 <p>Based on this data, an inverted index could look like this:</p> Key Value <code>category:electronics</code> Product IDs: [1, 2, 4] <code>category:home appliances</code> Product IDs: [3] <code>category:furniture</code> Product IDs: [5] <code>brand:samsung</code> Product IDs: [1, 3] <code>brand:apple</code> Product IDs: [2] <code>brand:sony</code> Product IDs: [4] <code>brand:ikea</code> Product IDs: [5] <code>price_range:0-100</code> Product IDs: [] <code>price_range:101-200</code> Product IDs: [1, 4] <code>price_range:201-300</code> Product IDs: [2, 5] <code>price_range:301-400</code> Product IDs: [3]","tags":["Qdrant","OpenAI"]},{"location":"2024/12/01/inverted-index/#explanation","title":"Explanation:","text":"<ul> <li>The inverted index maps keys (like <code>category:electronics</code> or <code>brand:samsung</code>) to a list of Product IDs.</li> <li>It can also include derived keys, such as <code>price_range</code>, which groups prices into ranges.</li> </ul> <p>This structure allows efficient filtering, as you can quickly retrieve all product IDs for a specific category, brand, or price range without scanning the entire dataset.</p>","tags":["Qdrant","OpenAI"]},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/vector-search/","title":"Vector Search","text":""},{"location":"category/vector-databases/","title":"Vector Databases","text":""}]}